
using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.SceneManagement;
using Object = UnityEngine.Object;

public class ObjectPoolManager : Singleton<ObjectPoolManager>
{
        
    private GameObject _root;

    private Canvas _canvas;
    //test
    public GameObject Root
    {
        get
        {
            if (_root == null)
            {
                _root = new GameObject { name = "@Pool" };
            }

            return _root;
        }
    }

    public Canvas Canvas
    {
        get
        {
            if (_canvas == null)
            {
                _canvas = GameObject.Find("UICanvas").GetComponent<Canvas>();
            }

            return _canvas;
        }
    }
    
    
    private Dictionary<string, GameObject> _folderList = new();
    private Dictionary<string, List<GameObject>> _poolList = new();

    protected override void AwakeInit()
    {
        SceneLoadManager.Instance.SceneClear += Clear;
    }


    public GameObject CreatePoolingObject(string assetName, Vector2 pos,bool isUIObject = false)
    {
        // 이미 poolList에 등록은 되어있고 재활용 가능한 오브젝트가 있는지 찾고 없다면 새로 만듬.
        var createObject = GetPoolObject(assetName,isUIObject);
        if (createObject != null)
        {
            return AssignInObject(createObject, pos);
        }
        
        //아예 폴더조차 등록 되지 않았을 때. ( 최초로 오브젝트 생성 시 )
        List<GameObject> createObjectList = RegisterPoolingObject(assetName, 1,isUIObject);
        createObject = createObjectList.FirstOrDefault();
        AssignInObject(createObject, pos);
        return createObject;

    }

    public GameObject CreatePoolingObject(GameObject go, Vector2 pos,bool isUIObject = false)
    {
        var createObject = GetPoolObject(go,isUIObject);
        if (createObject != null)
        {
            return AssignInObject(createObject, pos);
        }
        
        //아예 폴더조차 등록 되지 않았을 때. ( 최초로 오브젝트 생성 시 )
        List<GameObject> createObjectList = RegisterPoolingObject(go, 1,isUIObject);
        createObject = createObjectList.FirstOrDefault();
        AssignInObject(createObject, pos);
        return createObject;

    }

    /// <summary>
    /// 생성할 풀링 오브젝트를 미리 등록해두거나 / 폴더를 만든다.
    /// </summary>
    /// <param name="assetName">생성할 어드레서블 에셋 이름</param>
    /// <param name="amount">얼마나 미리 만들 건지 수량</param>
    /// <param name="isUIObject">Canvas에 생성할 것인지</param>
    /// <returns>amount만큼 담은 리스트를 반환한다.</returns>
    public List<GameObject> RegisterPoolingObject(string assetName, int amount,bool isUIObject = false)
    {
        //이미 등록 되어있다면 해당 PoolList를 반환한다.
        if (_poolList.TryGetValue(assetName, out var findObjects))
        {
            return findObjects;
        }
    
        //없다면 새로 폴더와 함께 만들어서 반환한다.
        ResourceManager.Instance.Load<GameObject>(assetName, (success) =>
        {   
            List<GameObject> createGameObjects = new List<GameObject>();
            //폴더를 생성한다. 이 때 카테고리가 있다면 카테고리를 생성해주고 그 밑에 폴더를 만들어준다.
            GameObject folder = new GameObject($"@{assetName}");
            //캔버스 옵션이 켜져있다면 캔버스를 넣어준다.
            Transform folderParentTransform;
            bool worldPosStays = false;
            if (isUIObject)
            {
                folderParentTransform = Canvas.transform;
            }
            else
            {
                folderParentTransform = Root.transform;
                worldPosStays = true;
            }
            folder.transform.SetParent(folderParentTransform.transform,worldPosStays);
            _folderList.Add(folder.name,folder);
            //amount만큼 오브젝트를 생성 후 폴더에 넣어준다. 만들어주기만 하기 때문에 Active 상태는 False로 해둔다.
            for (int i = 0; i < amount; i++)
            {
                var inst = Object.Instantiate(success, folder.transform, worldPosStays);
                inst.name = Utils.EraseUnityAutoGeneratedCloneName(inst.name);
                inst.SetActive(false);
       
                createGameObjects.Add(inst);
            }
            _poolList.Add(assetName,createGameObjects);
        });
    
        return _poolList[assetName];
    }
    
    /// <summary>
    /// 생성할 풀링 오브젝트를 미리 등록해두거나 / 폴더를 만든다.
    /// </summary>
    /// <param name="assetName">생성할 어드레서블 에셋 이름</param>
    /// <param name="amount">얼마나 미리 만들 건지 수량</param>
    /// <param name="isUIObject">Canvas에 생성할 것인지</param>
    /// <returns>amount만큼 담은 리스트를 반환한다.</returns>
    public List<GameObject> RegisterPoolingObject(GameObject asset, int amount,bool isUIObject = false)
    {
        //이미 등록 되어있다면 해당 PoolList를 반환한다.
        if (_poolList.TryGetValue(asset.name, out var findObjects))
        {
            return findObjects;
        }
    
        //없다면 새로 폴더와 함께 만들어서 반환한다.
        List<GameObject> createGameObjects = new List<GameObject>();
            //폴더를 생성한다. 이 때 카테고리가 있다면 카테고리를 생성해주고 그 밑에 폴더를 만들어준다.
            GameObject folder = new GameObject($"@{asset.name}");
            //캔버스 옵션이 켜져있다면 캔버스를 넣어준다.
            Transform folderParentTransform;
            bool worldPosStays = false;
            if (isUIObject)
            {
                folderParentTransform = Canvas.transform;
            }
            else
            {
                folderParentTransform = Root.transform;
                worldPosStays = true;
            }
            folder.transform.SetParent(folderParentTransform.transform,worldPosStays);
            _folderList.Add(folder.name,folder);
            //amount만큼 오브젝트를 생성 후 폴더에 넣어준다. 만들어주기만 하기 때문에 Active 상태는 False로 해둔다.
            for (int i = 0; i < amount; i++)
            {
                var inst = Object.Instantiate(asset, folder.transform, worldPosStays);
                inst.name = Utils.EraseUnityAutoGeneratedCloneName(inst.name);
                inst.SetActive(false);
       
                createGameObjects.Add(inst);
            }
            _poolList.Add(asset.name,createGameObjects);
        
    
        return _poolList[asset.name];
    }
    /// <summary>
    /// 생성한 오브젝트의 Active 상태를 true로 변경해주고 position을 셋팅한다.
    /// </summary>
    /// <param name="obj"></param>
    /// <param name="pos"></param>
    /// <returns></returns>
    private GameObject AssignInObject(GameObject obj,Vector2 pos)
    {
        obj.SetActive(true);
        obj.transform.position = pos;
        return obj;
    }
    
    private GameObject GetPoolObject(string name,bool isUIObject = false)
    {
        if (!_poolList.ContainsKey(name))
        {
            return null;
        }

        GameObject inActiveGameObject;
        try
        {
             inActiveGameObject = _poolList[name]
                .FirstOrDefault(item => !item.gameObject.activeInHierarchy)
                ?.gameObject;
        }
        catch (Exception e)
        {
            Debug.Log(e);
            return null;
        };
    
        if (inActiveGameObject != null)
        {
            return inActiveGameObject;
        }
    
        // 모든 object가 false 상태임을 의미함. 
        // 그러면 새로 만들어줘야 함.
        GameObject inst = null;
        ResourceManager.Instance.Load<GameObject>(name, (sucess) =>
        {
            GameObject folder = _folderList[$"@{name}"];

            inst = Object.Instantiate(sucess, folder.transform, !isUIObject);
            inst.name = Utils.EraseUnityAutoGeneratedCloneName(inst.name);
            inst.SetActive(false);
            _poolList[name].Add(inst);
        });
    
        return inst;
    
    }

    
    private GameObject GetPoolObject(GameObject go,bool isUIObject = false)
    {
        if (!_poolList.ContainsKey(go.name))
        {
            return null;
        }

        GameObject inActiveGameObject;
        try
        {
            inActiveGameObject = _poolList[go.name]
                .FirstOrDefault(item => !item.gameObject.activeInHierarchy)
                ?.gameObject;
        }
        catch (Exception e)
        {
            Debug.Log(e);
            return null;
        };
    
        if (inActiveGameObject != null)
        {
            return inActiveGameObject;
        }
    
        // 모든 object가 false 상태임을 의미함. 
        // 그러면 새로 만들어줘야 함.
        GameObject inst = null;
        GameObject folder = _folderList[$"@{go.name}"];

        inst = Instantiate(go, folder.transform, !isUIObject);
        inst.name = Utils.EraseUnityAutoGeneratedCloneName(inst.name);
        inst.SetActive(false);
        _poolList[go.name].Add(inst);

        return inst;
    }

    public void Clear()
    {
        _folderList.Clear();
        _poolList.Clear();
    }
}

