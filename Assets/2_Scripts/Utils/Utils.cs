using System;
using System.Collections.Generic;
using Cysharp.Threading.Tasks;
using Newtonsoft.Json;
using Spine.Unity;
using UnityEngine;

public class Utils
{

    private const string UNITY_AUTOGENERATED_CLONE_NAME = "(clone) ";
    public static T ParseEnum<T>(string value, bool ignoreCase = true)
    {
        return (T)Enum.Parse(typeof(T), value, ignoreCase);
    }

    public static T GetOrAddComponent<T>(GameObject go) where T : UnityEngine.Component
    {
        T component = go.GetComponent<T>();
        if (component == null)
            component = go.AddComponent<T>();
        return component;
    }
    
    public static string EraseUnityAutoGeneratedCloneName(string name)
    {
        int index = name.IndexOf(UNITY_AUTOGENERATED_CLONE_NAME);
        if (index > 0)
            name = name.Substring(0, index);
        return name;
            
    }

    public static T DeepCopy<T>(T source)
    {
        var serialized = JsonConvert.SerializeObject(source);
        return JsonConvert.DeserializeObject<T>(serialized);
    }
    
    public static double DotProduct(Vector2 v1, Vector2 v2)
    {
        return v1.x * v2.x + v1.y * v2.y;
    }

    public static Vector3 GetUIWorldPosition(RectTransform rectTransform)
    {
        Vector3 screenPosition = RectTransformUtility.WorldToScreenPoint(Camera.main, rectTransform.position);
        // 화면 좌표를 월드 좌표로 변환
        RectTransformUtility.ScreenPointToWorldPointInRectangle(rectTransform, screenPosition, Camera.main, out var worldPosition);
        return worldPosition;

    }

    public static void CharacterSkeletonInit(SkeletonGraphic skeletonGraphic,string characterPackName)
    {
        skeletonGraphic.skeletonDataAsset = ResourceManager.Instance.Load<SkeletonDataAsset>($"{characterPackName}_{ELabelNames.SkeletonData}");
        skeletonGraphic.material = ResourceManager.Instance.Load<Material>($"{characterPackName}_{ELabelNames.UIMaterial}");
        string skinName = skeletonGraphic.skeletonDataAsset.name;
        skeletonGraphic.initialSkinName = skinName.Substring(0, skinName.LastIndexOf('_'));
        skeletonGraphic.Initialize(true);
    }
    
    public static int GetRandomIntBasedOnRates(IEnumerable<float> rateList)
    {
        float rate = UnityEngine.Random.Range(0f, 100f);
        float limit = 0;
        int count = 0;

        foreach (float next in rateList)
        {
            limit += next;
            if (limit > rate)
            {
                return count;
            }
            ++count;
        }

        return count - 1;
    }

    public static async void DoShake(Transform transform, float time = 1f, float amount = 0.1f, bool isUnscale = false)
    {
        Vector3 originPos = transform.position;

        while (time > 0)
        {
            transform.position = originPos + new Vector3(UnityEngine.Random.Range(-amount, amount), UnityEngine.Random.Range(-amount, amount), 0);
            await UniTask.DelayFrame(1);
            if (transform == null)
                break;
            transform.position = originPos;
            if (isUnscale)
                time -= Time.unscaledDeltaTime;

            else
                time -= Time.deltaTime;
        }
    }

    public static bool IsPosOnUI(RectTransform rect, Vector2 mousePos, Vector2 imagePos)
    {
        if (imagePos.x - rect.sizeDelta.x * 0.5f > mousePos.x || imagePos.x + rect.sizeDelta.x * 0.5f < mousePos.x) return false;
        if (imagePos.y - rect.sizeDelta.y * 0.5f > mousePos.y || imagePos.y + rect.sizeDelta.y * 0.5f < mousePos.y) return false;

        return true;
    }

    public class ReadonlyNumber<T>
    {
        private readonly T _value;
        public T Value => _value;

        public ReadonlyNumber(T value)
        {
            _value = value;
        }
        
    }
}